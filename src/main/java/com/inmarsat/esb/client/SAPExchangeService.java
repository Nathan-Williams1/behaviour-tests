
package com.inmarsat.esb.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceException;
import javax.xml.ws.WebServiceFeature;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebServiceClient(name = "SAPExchangeService", targetNamespace = "http://esb.oneitbtp.inmarsat.com/exchange_adapter", wsdlLocation = "http://collections-currency-exchange-billing-dev-currency.89d9.dev-inmarsat.openshiftapps.com/?wsdl")
public class SAPExchangeService extends Service {

	private static final URL SAPEXCHANGESERVICE_WSDL_LOCATION;
	private static final WebServiceException SAPEXCHANGESERVICE_EXCEPTION;
	private static final String HTTP = "http://esb.oneitbtp.inmarsat.com/exchange_adapter";
	private static final QName SAPEXCHANGESERVICE_QNAME = new QName(HTTP, "SAPExchangeService");

	static {
		URL url = null;
		WebServiceException e = null;
		try {
			url = new URL(
					"http://collections-currency-exchange-billing-dev-currency.89d9.dev-inmarsat.openshiftapps.com/?wsdl");
		} catch (MalformedURLException ex) {
			e = new WebServiceException(ex);
		}
		SAPEXCHANGESERVICE_WSDL_LOCATION = url;
		SAPEXCHANGESERVICE_EXCEPTION = e;
	}

	public SAPExchangeService() {
		super(getWsdlLocation(), SAPEXCHANGESERVICE_QNAME);
	}

	public SAPExchangeService(WebServiceFeature... features) {
		super(getWsdlLocation(), SAPEXCHANGESERVICE_QNAME, features);
	}

	public SAPExchangeService(URL wsdlLocation) {
		super(wsdlLocation, SAPEXCHANGESERVICE_QNAME);
	}

	public SAPExchangeService(URL wsdlLocation, WebServiceFeature... features) {
		super(wsdlLocation, SAPEXCHANGESERVICE_QNAME, features);
	}

	public SAPExchangeService(URL wsdlLocation, QName serviceName) {
		super(wsdlLocation, serviceName);
	}

	public SAPExchangeService(URL wsdlLocation, QName serviceName, WebServiceFeature... features) {
		super(wsdlLocation, serviceName, features);
	}

	/**
	 * 
	 * @return returns SAPExchangeServiceEndpoint
	 */
	@WebEndpoint(name = "SAPExchangeServicePort")
	public SAPExchangeServiceEndpoint getSAPExchangeServicePort() {
		return super.getPort(new QName(HTTP, "SAPExchangeServicePort"), SAPExchangeServiceEndpoint.class);
	}

	/**
	 * 
	 * @param features
	 *            A list of {@link javax.xml.ws.WebServiceFeature} to configure on
	 *            the proxy. Supported features not in the <code>features</code>
	 *            parameter will have their default values.
	 * @return returns SAPExchangeServiceEndpoint
	 */
	@WebEndpoint(name = "SAPExchangeServicePort")
	public SAPExchangeServiceEndpoint getSAPExchangeServicePort(WebServiceFeature... features) {
		return super.getPort(new QName(HTTP, "SAPExchangeServicePort"), SAPExchangeServiceEndpoint.class, features);
	}

	private static URL getWsdlLocation() {
		if (SAPEXCHANGESERVICE_EXCEPTION != null) {
			throw SAPEXCHANGESERVICE_EXCEPTION;
		}
		return SAPEXCHANGESERVICE_WSDL_LOCATION;
	}

}
